## JoruriGw v2.0.0 インストールマニュアル                   2012.09.25
**********************************************************************
 1 想定環境
**********************************************************************

[システム]
OS         : CentOS 6.2
Webサーバ  : Apache 2.2
DBシステム : MySQL 5.1
Ruby       : Ruby 1.9.3
Rails      : Rails 3.2.7
キャッシュ : memcached 1.4.13

[設定]
IPアドレス : 192.168.0.2
ドメイン   : 192.168.0.2

※DECOアイコンについて
  メニュー内、「DECO Drive」アイコンについては、別プロジェクトの為、
  リンクのみとなっております。

**********************************************************************
 2 CentOS のインストール
**********************************************************************

CentOSをインストールします。

rootユーザに変更します。

  $ su -

======================================================================
 2.1 SELinux の無効化
======================================================================

SELinuxを無効にします。

  # /usr/sbin/setenforce 0

自動起動を無効にします。

  # vi /etc/sysconfig/selinux
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  SELINUX=disabled    #変更
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  ※セキュリティ設定は環境に応じて適切に設定してください。

======================================================================
 2.2 Firewall の無効化
======================================================================

iptablesを停止し、自動起動を無効にします。

  # /sbin/service iptables stop
  # /sbin/chkconfig iptables off

======================================================================
 2.3 パッケージのインストール
======================================================================

ソースのコンパイルに必要なパッケージをインストールします。

既にインストールされているかを確認します。

  # rpm -qa wget make gcc-c++

なければインストールします。

  # yum install -y wget make gcc-c++


**********************************************************************
 3 事前準備
**********************************************************************

必要なパッケージをダウンロードします。

  # cd /usr/local/src/
  # wget http://joruri.org/download/jorurigw/jorurigw-2.0.0.tar.gz
  # wget http://image_magick.veidrodis.com/image_magick/ImageMagick-6.7.7-0.tar.gz
  # wget ftp://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p194.tar.gz
  # wget http://memcached.googlecode.com/files/memcached-1.4.13.tar.gz
  # wget http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz


Joruriユーザを作成します。

  # useradd joruri
  # passwd joruri
  # 新しいパスワード： <= 任意のパスワードを入力してください

JoruriGwソースコードを設置します。

  # mkdir /var/share
  # tar xvzf jorurigw-2.0.0.tar.gz -C /var/share
  # chown -R joruri:joruri /var/share/jorurigw

**********************************************************************
 4 Apache のインストール
**********************************************************************

Apacheをインストールします。

  # yum install -y httpd httpd-devel

設定ファイルを編集します。

  # vi /etc/httpd/conf/httpd.conf
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  ServerName 192.168.0.2    #変更
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

設定ファイルにエラーがないことを確認し、Apacheを起動します。

  # /sbin/service httpd configtest
  # /sbin/service httpd start

自動起動に設定します。

  # /sbin/chkconfig httpd on

**********************************************************************
 5 MySQL のインストール
**********************************************************************

MySQLをインストールします。

  # yum install -y mysql-server mysql-devel

文字エンコーディングの標準を UTF-8 に設定します。

  # vi /etc/my.cnf
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  [mysqld]
  default-character-set=utf8    #追加
  max_allowed_packet=16M    #追加

  [client]                      #追加（末尾に追加）
  default-character-set=utf8    #追加
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

MySQLを起動します。

  # /usr/bin/mysql_install_db --user=mysql
  # /sbin/service mysqld start

自動起動に設定します。

  # /sbin/chkconfig mysqld on

rootユーザのパスワードを設定します。
  # /usr/bin/mysqladmin -u root password "pass"

joruriユーザを作成します。
  # /usr/bin/mysql -u root -p \
  #     -e "grant all on *.* to joruri@localhost IDENTIFIED BY 'pass'"

**********************************************************************
 6 ImageMagick のインストール
**********************************************************************

画像関連のパッケージをインストールします。

  # yum -y install libjpeg-devel libpng-devel

ImageMagickをインストールします。

  # cd /usr/local/src/
  # tar xvzf ImageMagick-6.7.7-0.tar.gz
  # cd ImageMagick-6.7.7-0
  # ./configure
  # make
  # make install

ライブラリをインストールします。

  # cd /lib
  # ln -s /usr/local/lib/libMagickCore.so.1
  # ln -s /usr/local/lib/libMagickCore.so.2
  # ln -s /usr/local/lib/libMagick.so.10

**********************************************************************
 7 Ruby on Rails のインストール
**********************************************************************

  # cd /usr/local/src
  # tar -zxvf yaml-0.1.4.tar.gz
  # cd yaml-0.1.4
  # ./configure
  # make
  # make install

======================================================================
 7.1 Ruby 1.9.3 のインストール
======================================================================

Rubyをインストールします。

  # cd /usr/local/src
  # tar xvzf ruby-1.9.3-p194.tar.gz
  # cd ruby-1.9.3-p194
  # ./configure -prefix=/usr/local
  # make
  # make install

インストール結果を確認します。
  # /usr/local/bin/ruby -v
   => ruby 1.9.3p194 (2012-04-20 revision 35410) [i686-linux]


======================================================================
 7.2 Phusion Passenger のインストール
======================================================================

  # yum -y install curl-devel

Phusion Passengerをインストールします。

  # gem install passenger -v 3.0.13
  # passenger-install-apache2-module

  ( 画面の内容を確認して Enterキーを押してください。 )

Phusion Passengerの動作環境を設定します。

  # vi /etc/httpd/conf/httpd.conf
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  #下記を追加
  LoadModule passenger_module /usr/local/lib/ruby/gems/1.9.1/gems/passenger-3.0.13/ext/apache2/mod_passenger.so
  PassengerRoot /usr/local/lib/ruby/gems/1.9.1/gems/passenger-3.0.13
  PassengerRuby /usr/local/bin/ruby
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

======================================================================
 7.3 gemライブラリ のインストール
======================================================================
  # PKG_CONFIG_PATH=/usr/local/src/ImageMagick-6.7.7-0/magick
  # export PKG_CONFIG_PATH
  # gem install bundler -v 1.1.4
  # cd /var/share/jorurigw
  # bundle install

ネットワーク経由でファイルのダウンロードとインストールが行われます。
正しく完了すれば次のようなメッセージが表示されます。
  =>Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.


**********************************************************************
  8 JoruriGw のインストール
**********************************************************************

Joruriユーザに変更します。

  # su - joruri
  $ cd /var/share/jorurigw

======================================================================
 8.1 設定ファイル
======================================================================

環境に応じて設定ファイルを編集します。

DB接続情報

  $ vi config/database.yml

LDAP接続情報

  $ vi config/ldap.yml

  ※LDAPに関する設定は、ダウンロードページより補足資料をご参照下さい。
    http://joruri.org/download/  【LDAP関連補足資料】LDAP_LDIF.zip

SMTP接続情報

  $ vi config/environments/development.rb

  ※連絡メモの「携帯等メール転送設定」などメール機能を利用する場合はSMTPの設定が必要です。

======================================================================
 8.2 データベースの作成
======================================================================
※作業の途中でmysqlに設定したパスワードを聞かれますのでご用意ください。

データベースを作成します。

  $ cd /var/share/jorurigw

  $ /usr/bin/mysql -u root -p -e "create database development_jgw_core"
  $ /usr/bin/mysql -u root -p -e "create database development_jgw_gw"
  $ /usr/bin/mysql -u root -p -e "create database development_jgw_gw_pref"
  $ /usr/bin/mysql -u root -p -e "create database development_jgw_bbs_000001"

テーブルを作成します。

  $ /usr/bin/mysql -u root -p development_jgw_core < ./db/development_jgw_core_schema.sql
  $ /usr/bin/mysql -u root -p development_jgw_gw < ./db/development_jgw_gw_schema.sql
  $ /usr/bin/mysql -u root -p development_jgw_gw_pref < ./db/development_jgw_gw_pref_schema.sql
  $ /usr/bin/mysql -u root -p development_jgw_bbs_000001 < ./db/development_jgw_bbs_000001_schema.sql

初期データを登録します。

  $ /usr/bin/mysql -u root -p development_jgw_core < ./db/development_jgw_core_init.sql
  $ /usr/bin/mysql -u root -p development_jgw_gw < ./db/development_jgw_gw_init.sql
  $ /usr/bin/mysql -u root -p development_jgw_gw_pref < ./db/development_jgw_gw_pref_init.sql
  $ /usr/bin/mysql -u root -p development_jgw_bbs_000001 < ./db/development_jgw_bbs_000001_init.sql

※Railsの実行環境がproductionの場合、データベース名は下記のようにしてください。
production_jgw_core
production_jgw_gw
production_jgw_gw_pref
production_jgw_bbs_000001
さらに環境設定のために次のSQL文を実行してください。
  $ /usr/bin/mysql -u root -p -e "UPDATE production_jgw_gw.gwbbs_controls SET dbname = 'production_jgw_bbs_000001' WHERE gwbbs_controls.id =1;"


======================================================================
 8.3 memcached のインストール
======================================================================

libeventをインストールします。

  $ su -
  # yum -y install libevent libevent-devel

memcachedをインストールします。

  # cd /usr/local/src/
  # tar xvzf memcached-1.4.13.tar.gz
  # cd memcached-1.4.13
  # ./configure
  # make
  # make install

自動起動に設定します。

  # cp /usr/local/src/memcached-1.4.13/scripts/memcached.sysv /etc/rc.d/init.d/memcached
  # vi /etc/rc.d/init.d/memcached
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  #16行目に下記を追加
  PATH=$PATH:/usr/local/bin ; export PATH
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # mkdir /var/run/memcached
  # /sbin/chkconfig --add memcached
  # chkconfig --level 35 memcached on

memcachedを起動します。

  # /sbin/service memcached start

======================================================================
 8.4 VirtualHost の反映
======================================================================

Apacheに設定を追加します。
  # vi /etc/httpd/conf.d/vhosts.conf
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  NameVirtualHost *:80

  <VirtualHost *:80>
      ServerName default
      DocumentRoot /var/share/jorurigw/public
      RailsEnv "development"
      PassengerHighPerformance on
  </VirtualHost>
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

※Railsの実行環境がproductionの場合、RailsEnvは下記のようにしてください。
      RailsEnv "production"


Apache を再起動します。
  # /sbin/service httpd configtest
  # /sbin/service httpd restart


**********************************************************************
 9 定期実行設定
**********************************************************************

削除期間が過ぎた情報を削除します。
以下の例は毎日3時～4時にかけて削除しています。
動作環境が development 以外の場合は -e development の箇所をご利用の環境に書き換えてください。
例）
rails runner -e development 'Scriptname' → rails runner -e production 'Scriptname'


削除期間が過ぎたスケジュールを削除します。

  # su - joruri
  $ crontab -e
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  00 3 * * * /usr/local/bin/ruby /var/share/jorurigw/script/rails runner \
    -e development 'Gw::Script::Schedule.delete'
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

完了済みで削除期間が過ぎたTODOを削除します。

  $ crontab -e
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  05 3 * * * /usr/local/bin/ruby /var/share/jorurigw/script/rails runner \
    -e development 'Gw::Script::Todo.delete'
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

既読で削除期間が過ぎた連絡メモを削除します。

  $ crontab -e
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  10 3 * * * /usr/local/bin/ruby /var/share/jorurigw/script/rails runner \
    -e development 'Gw::Script::Memo.delete'
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

期限切れで削除期間が過ぎた掲示板を削除します。

  $ crontab -e
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  15 3 * * * /usr/local/bin/ruby /var/share/jorurigw/script/rails runner \
    -e development 'Gwbbs::Script::Task.delete'
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

期限切れで削除期間が過ぎた回覧板を削除します。

  $ crontab -e
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  20 3 * * * /usr/local/bin/ruby /var/share/jorurigw/script/rails runner \
    -e development 'Gwcircular::Script::Task.delete'
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

期限切れで削除期間が過ぎた照会回答を削除します。

  $ crontab -e
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  25 3 * * * /usr/local/bin/ruby /var/share/jorurigw/script/rails runner \
    -e development 'Gwmonitor::Script::Task.delete'
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

削除期間が過ぎたアンケートを削除します。

  $ crontab -e
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  30 3 * * * /usr/local/bin/ruby /var/share/jorurigw/script/rails runner \
    -e development 'Questionnaire::Script::Task.delete'
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

不要となったセッションのデータを削除します。

  $ crontab -e
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  35 3 * * * /usr/local/bin/ruby /var/share/jorurigw/script/rails runner \
    -e development 'System::Script::Session.delete_expired_sessions'
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

不要となった掲示板のデータを削除します。

  $ crontab -e
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  40 3 * * * /usr/local/bin/ruby /var/share/jorurigw/script/rails runner \
    -e development 'Gwbbs::Script::Task.preparation_delete'
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

不要となった電子図書のデータを削除します。

  $ crontab -e
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  45 3 * * * /usr/local/bin/ruby /var/share/jorurigw/script/rails runner \
    -e development 'Digitallibrary::Script::Task.preparation_delete'
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

不要となった書庫のデータを削除します。

  $ crontab -e
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  50 3 * * * /usr/local/bin/ruby /var/share/jorurigw/script/rails runner \
    -e development 'Doclibrary::Script::Task.preparation_delete'
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

不要となったQ&Aのデータを削除します。

  $ crontab -e
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  55 3 * * * /usr/local/bin/ruby /var/share/jorurigw/script/rails runner \
    -e development 'Gwqa::Script::Task.preparation_delete'
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

不要となったFAQのデータを削除します。

  $ crontab -e
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  00 4 * * * /usr/local/bin/ruby /var/share/jorurigw/script/rails runner \
    -e development 'Gwfaq::Script::Task.preparation_delete'
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

不要となった研修申込・受付のテンポラリファイルを削除します。

  $ crontab -e
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  05 4 * * * /usr/local/bin/ruby /var/share/jorurigw/script/rails runner \
    -e development 'Gwsub::Script::Sb01_training.delete_abandoned_files'
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

幹部・部課長の在席表示を全てoffにします。

  $ crontab -e
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  0 0 * * * /usr/local/bin/ruby /var/share/jorurigw/script/rails runner \
    -e development 'Gw::Script::PrefExective.state_all_off'
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

**********************************************************************
