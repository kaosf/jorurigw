<%
prop_types = Gw::ScheduleProp.get_genre_select

owner_u = if !params[:item].blank? && !params[:item][:owner_uid].blank?
  {:id=>params[:item][:owner_uid], :displayname=>params[:item][:owner_udisplayname]}
elsif !@item.owner_uid.blank?  and params[:action] != 'quote'
  owner_user = Gw::Model::Schedule.get_user(@item.owner_uid)
  if owner_user.blank?
    if @item.schedule_prop.blank? || @item.schedule_prop.is_kanzai? >= 3
      {:id=>Site.user.id, :displayname=>Site.user.display_name}
    else
      {:id=>'', :displayname=>''}
    end
  else
    {:id=>@item.owner_uid, :displayname=>Gw.user_display_name(@item.owner_uid, @item.owner_uname)}
  end
else
  {:id=>Site.user.id, :displayname=>Site.user.display_name}
end

opt_prop_types = Gw.options_for_select(prop_types)
ucls = ''
uid = ''
uname = ''
gname = ''
gid = ''
gcode = ''
if !params[:prop_id].blank? && !params[:s_genre].blank?
  genre = params[:s_genre]
  mdl_s = Gw::ScheduleProp.prop_conv(:genre_to_mdl, genre)
  mdl = eval(mdl_s)
  u = mdl.find(params[:prop_id])
  if u.delete_state == 0 && u.reserved_state == 1
    ucls = genre
    uid = params[:prop_id]
    uname = u.name
    gname = !u.gname.blank? ? u.gname : ""
    gid = !u.gid.blank? ? u.gid : @mygid
    group = System::Group.find(gid)
    gcode = group.code
  end
end
@content_for_form_prop = ''

_params = params.dup
if params[:s_genre].blank?
    _params[:s_genre]='other:other'
elsif params[:s_genre] == 'other'
  _params[:s_genre]='other:other'
end

params[:st_at] = @d_load_st
params[:ed_at] = @d_load_ed
_defalut_props = Gw::ScheduleProp.getajax _params
defalut_props = _defalut_props.collect{|x| [x[2], x[1]]}
%>
<%=  hidden_field_tag('init[schedule_props_json]',
  (params[:item] && params[:item][:schedule_props_json] ? params[:item][:schedule_props_json] : nz(@props_json) )) %>

<%= hidden_field_tag('init[prop_cls]', ucls) %>
<%= hidden_field_tag('init[prop_id]', uid) %>
<%= hidden_field_tag('init[prop_name]', uname) %>
<%= hidden_field_tag('init[prop_gname]', gname) %>
<%= hidden_field_tag('init[prop_gcode]', gcode) %>

<table class="show" id="owner_table">
<tr><th></th><td>
<%= hidden_field_tag 'item[owner_uid]', owner_u[:id] %>
<%# <label id="item_owner_udisplayname" name="item[owner_udisplayname]">#{owner_u[:displayname]}</label> %>
<%= button_to_function '予約担当者に設定 →', 'set_owner()' %>
<%= text_field_tag 'item[owner_udisplayname]', owner_u[:displayname], :readonly=>true %>
</td></tr>
</table>

<table class="show" id="prop_items_table">
<tr><th><span>設備予約</span></th><td>
<table border="0"><tr>
<td>
<%= select_tag("item[schedule_props][prop_type_id]", opt_prop_types, :onchange=>'update_prop_cand();') %>
<br />
<%= select_tag("item[schedule_props][prop_id]", Gw.options_for_select(defalut_props, nil, :title=>genre), :size=>10, :style => 'width:200px;', :ondblclick => 'add_prop()', :multiple => true) if !genre.blank? %>
<%= select_tag("item[schedule_props][prop_id]", Gw.options_for_select(defalut_props, nil, :title=>'other'), :size=>10, :style => 'width:200px;', :ondblclick => 'add_prop()', :multiple => true) if genre.blank? %>

</td>
<td>
<%= button_to_function '追加 →', 'add_prop()' %>
  <br /><br />
<%= button_to_function '← 削除', 'del_prop()' %>
</td>
<td>
<%= select_tag("item[schedule_props_add_buf]", [], :size=>10, :style => 'width:200px;', :ondblclick => 'del_prop()', :multiple => true) %>
<%= hidden_field_tag 'item[schedule_props_json]', '' %>
</td>
</tr></table>
<%= Gw.div_notice '', :id=>'notice_ajax_prop' %>
</td></tr>
<tr><th>連絡先電話番号（内線）</th><td>
<%= '<span class="fieldWithErrors">' if @inquire_to_err_flg %>
<%= text_field_tag("item[inquire_to]", @inquire_to, :errors=>@item.errors, :class =>"IMEoff", :style => 'width:10em;') %>
<%= '</span>' if @inquire_to_err_flg %><br />
</td></tr>
</table>
